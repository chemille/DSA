'''
Binary Search
Easy

You are given an array of distinct integers nums, sorted in ascending order, and an integer target.

Implement a function to search for target within nums. If it exists, then return its index, otherwise, return -1.

Your solution must run in O(logn) time.

Example 1:
Input: nums = [-1,0,2,4,6,8], target = 4
Output: 3

Example 2:
Input: nums = [-1,0,2,4,6,8], target = 3
Output: -1

Constraints:
1 <= nums.length <= 10000.
-10000 < nums[i], target < 10000
'''

def binarySearch(nums, target):
    ## Time O(log n) solution ##
    # l = 0 
    # r = len(nums) - 1

    # while l <= r: 
    #     mid = (r + l) // 2
    #     if nums[mid] == target:
    #         return mid
    #     elif target > nums[mid]:
    #         l = mid + 1
    #     elif target < nums[mid]:
    #         r = mid - 1
    # return -1

    ## Neetcode solution O(log n) ##
    l, r = 0, len(nums) - 1 

    while l <= r: ## Needs to be <= in the case that there is only 1 value in the nums array
        m = l + (r - l) // 2 ## l + (r - l) will prevent overflow in languages such as Java or C++ because instead of adding l + r, we're subtracting (r - l) + l 
        if nums[m] > target:
            r = m - 1
        elif nums[m] < target:
            l = m + 1
        else:
            return m
    return - 1

print(binarySearch([-1,0,3,5,9,12], 9)) #4
print(binarySearch([-1,0,2,4,6,8], 3)) #-1
print(binarySearch([1], 2)) # -1
